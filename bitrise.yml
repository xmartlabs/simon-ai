format_version: "13"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: flutter
workflows:
  _dev_setup:
    steps:
      - file-downloader@1:
          title: Download Service Account
          inputs:
            - destination: $BITRISE_SOURCE_DIR/$FIREBASE_SERVICE_ACCOUNT_FILE_NAME
            - source: $BITRISEIO_FIREBASE_SERVICE_ACCOUNT_URL
      - file-downloader@1:
          title: Download IOS Dist Certificate
          inputs:
            - destination: $BITRISE_SOURCE_DIR/$DIST_CERTIFICATE_FILE_NAME
            - source: $BITRISEIO_IOS_DIST_CERTIFICATE_URL
      - file-downloader@1:
          title: Download Android keystore
          inputs:
            - destination: $BITRISE_SOURCE_DIR/android/app/$KEYSTORE_FILE
            - source: $BITRISEIO_KEYSTORE_URL
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash

                echo -e $ENV_DEV_CONFIG >> $BITRISE_SOURCE_DIR/$FLUTTER_ENV_FILE

                cat $BITRISE_SOURCE_DIR/$FLUTTER_ENV_FILE
          title: Create env file
  deploy:
    description: |
      Builds and deploys app using [Deploy to bitrise.io Step](https://devcenter.bitrise.io/en/getting-started/getting-started-with-flutter-apps.html#deploying-a-flutter-app).

      If you build for iOS, make sure to set up code signing secrets on Bitrise for a successful build.

      Next steps:
      - Check out [Getting started with Flutter apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-flutter-apps.html) for signing and deployment options.
      - Check out the [Code signing guide](https://devcenter.bitrise.io/en/code-signing.html) for iOS and Android
    steps:
      - activate-ssh-key@4: {}
      - git-clone@8: {}
      - certificate-and-profile-installer@1: {}
      - flutter-installer@0:
          inputs:
            - version: 3.13.2
            - is_update: "false"
      - flutter-analyze@0:
          inputs:
            - project_location: $BITRISE_FLUTTER_PROJECT_LOCATION
      - flutter-test@1:
          inputs:
            - project_location: $BITRISE_FLUTTER_PROJECT_LOCATION
      - flutter-build@0:
          inputs:
            - project_location: $BITRISE_FLUTTER_PROJECT_LOCATION
            - platform: both
            - ios_output_type: archive
      - deploy-to-bitrise-io@2: {}
  deploy_dev_firebase:
    before_run:
      - setup
      - _dev_setup
      - firebase_dev_android
      - firebase_dev_ios
  deploy_dev_testflight:
    before_run:
      - setup
      - _dev_setup
    steps:
      - fastlane@3:
          inputs:
            - work_dir: $BITRISE_SOURCE_DIR/ios
            - connection: "off"
            - lane: ios publish_dev_testflight
          title: deploy_dev_testflight
  firebase_dev_android:
    steps:
      - fastlane@3:
          inputs:
            - work_dir: $BITRISE_SOURCE_DIR/android
            - connection: "off"
            - lane: android deploy_firebase_dev --verbose
          title: firebase dev android
    envs:
      - opts:
          is_expand: false
        FIREBASE_APP_ID_DEV: FIREBASE_APP_ID_DEV
  firebase_dev_ios:
    steps:
      - fastlane@3:
          inputs:
            - work_dir: $BITRISE_SOURCE_DIR/ios
            - connection: "off"
            - lane: ios publish_dev_firebase
          title: firebase_dev_ios
    envs:
      - opts:
          is_expand: false
        FIREBASE_APP_ID_DEV: FIREBASE_APP_ID_DEV
  run_test_and_analyzer:
    before_run:
      - setup
    steps:
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash

                echo -e $ENV_DEV_CONFIG >> $BITRISE_SOURCE_DIR/$FLUTTER_ENV_FILE

                cat $BITRISE_SOURCE_DIR/$FLUTTER_ENV_FILE
          title: Create env file
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash

                fvm flutter --version

                fvm dart --version

                fvm flutter doctor
          title: Check fvm and dart versions
      - fastlane@3:
          title: Run linter
          inputs:
            - api_key_path: null
            - api_issuer: null
            - apple_id: null
            - password: null
            - app_password: null
            - connection: "off"
            - verbose_log: "yes"
            - lane: lints
      - fastlane@3:
          inputs:
            - api_key_path: null
            - api_issuer: null
            - apple_id: null
            - password: null
            - app_password: null
            - connection: "off"
            - lane: ensure_no_change_in_generated_code
          title: Run check generated code
          is_always_run: true
      - fastlane@3:
          inputs:
            - api_key_path: null
            - api_issuer: null
            - apple_id: null
            - password: null
            - app_password: null
            - connection: "off"
            - lane: tests
          title: Run tests
          is_always_run: true
  setup:
    steps:
      - activate-ssh-key@4:
          run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
      - git-clone@8:
          inputs:
            - clone_depth: "15"
      - cache-pull@2: {}
      - change-workdir@1:
          inputs:
            - is_create_path: "false"
            - path: client
      - install-flutter-version-manager@2.0: {}
      - script@1:
          inputs:
            - script_file_path: null
            - content: |-
                #!/usr/bin/env bash

                fvm install
          title: Install fvm
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash

                rm android/.ruby-version
                rm ios/.ruby-version
                rm .ruby-version

                #rbenv install || exit 0
          title: Update ruby version
      - cache-push@2: {}
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash

                fvm dart pub global activate arb_utils
          title: Activate arb_utils
meta:
  bitrise.io:
    stack: osx-xcode-14.3.x-ventura
    machine_type_id: g2-m1.4core
app:
  envs:
    - opts:
        is_expand: false
      FASTLANE_XCODE_LIST_TIMEOUT: "120"
    - opts:
        is_expand: false
      FIREBASE_PROJECT_ID: simon-ai
    - opts:
        is_expand: false
      FIREBASE_SERVICE_ACCOUNT_FILE: ../service_account.json
    - opts:
        is_expand: false
      FIREBASE_SERVICE_ACCOUNT_FILE_NAME: service_account.json
    - opts:
        is_expand: false
      FIREBASE_TESTER_GROUPS: xl-testing
    - opts:
        is_expand: false
      DIST_CERTIFICATE_FILE_NAME: dist_certificate.p12
    - opts:
        is_expand: false
      DIST_CERTIFICATE_PATH: ../dist_certificate.p12
    - opts:
        is_expand: false
      TEMP_KEYCHAIN_NAME: fastlane-keychain
    - opts:
        is_expand: false
      TEMP_KEYCHAIN_PASSWORD: fastlane-keychain-password
    - opts:
        is_expand: false
      APPLE_TEAM_ID: APPLE_TEAM_ID
    - opts:
        is_expand: false
      FLUTTER_ENV_FILE: .env
    - opts:
        is_expand: false
      ENV_DEV_CONFIG: |-
        API_BASE_URL=\n
        BUGSEE_API_KEY=\n
    - opts:
        is_expand: false
      FIREBAE_APP_ID_JSON_CONTENT: |-
        {
          "file_generated_by": "FlutterFire CLI",
          "purpose": "FirebaseAppID & ProjectID for this Firebase app in this directory",
          "GOOGLE_APP_ID": "GOOGLE_APP_ID",
          "FIREBASE_PROJECT_ID": "simon-ai",
          "GCM_SENDER_ID": "GCM_SENDER_ID"
        }
